import type { INodeProperties } from 'n8n-workflow';

export const triggerOperations: INodeProperties[] = [
	{
		displayName: 'Webhook ID',
		name: 'webhookId',
		type: 'string',
		default: '',
		displayOptions: {
			show: {
				event: [
					'contact.created',
					'contact.updated',
					'contact.deleted',
					'invoice.created',
					'invoice.updated',
					'invoice.paid',
					'quote.created',
					'quote.updated',
					'quote.converted',
					'receipt.created',
					'receipt.updated',
					'catalog.created',
					'catalog.updated',
					'purchase_invoice.created',
					'purchase_invoice.updated',
					'voucher.created',
					'voucher.updated',
					'employee.created',
					'employee.updated',
					'bank.transaction',
					'gst.return_filed',
				],
			},
		},
		description: 'The webhook ID (auto-generated when webhook is registered)',
	},
	{
		displayName: 'Filters',
		name: 'filters',
		type: 'fixedCollection',
		typeOptions: {
			multipleValues: false,
		},
		default: {},
		displayOptions: {
			show: {
				event: [
					'contact.created',
					'contact.updated',
					'contact.deleted',
					'invoice.created',
					'invoice.updated',
					'invoice.paid',
					'quote.created',
					'quote.updated',
					'quote.converted',
					'receipt.created',
					'receipt.updated',
					'catalog.created',
					'catalog.updated',
					'purchase_invoice.created',
					'purchase_invoice.updated',
					'voucher.created',
					'voucher.updated',
					'employee.created',
					'employee.updated',
					'bank.transaction',
					'gst.return_filed',
				],
			},
		},
		options: [
			{
				displayName: 'Filter Options',
				name: 'filterOptions',
				values: [
					{
						displayName: 'Contact Filter',
						name: 'contactFilter',
						type: 'options',
						typeOptions: {
							loadOptionsMethod: 'getContactFilters',
						},
						default: '',
						displayOptions: {
							show: {
								event: [
									'contact.created',
									'contact.updated',
									'contact.deleted',
									'invoice.created',
									'invoice.updated',
									'invoice.paid',
									'quote.created',
									'quote.updated',
									'quote.converted',
									'receipt.created',
									'receipt.updated',
								],
							},
						},
						description: 'Filter events for specific contact',
					},
					{
						displayName: 'Status Filter',
						name: 'statusFilter',
						type: 'options',
						options: [
							{ name: 'All', value: 'all' },
							{ name: 'Active', value: 'active' },
							{ name: 'Inactive', value: 'inactive' },
							{ name: 'Draft', value: 'draft' },
							{ name: 'Published', value: 'published' },
							{ name: 'Paid', value: 'paid' },
							{ name: 'Unpaid', value: 'unpaid' },
							{ name: 'Overdue', value: 'overdue' },
						],
						default: 'all',
						displayOptions: {
							show: {
								event: [
									'invoice.created',
									'invoice.updated',
									'invoice.paid',
									'quote.created',
									'quote.updated',
									'quote.converted',
									'receipt.created',
									'receipt.updated',
									'purchase_invoice.created',
									'purchase_invoice.updated',
									'voucher.created',
									'voucher.updated',
								],
							},
						},
						description: 'Filter events by status',
					},
					{
						displayName: 'Amount Range',
						name: 'amountRange',
						type: 'fixedCollection',
						typeOptions: {
							multipleValues: false,
						},
						default: {},
						displayOptions: {
							show: {
								event: [
									'invoice.created',
									'invoice.updated',
									'invoice.paid',
									'quote.created',
									'quote.updated',
									'quote.converted',
									'receipt.created',
									'receipt.updated',
									'purchase_invoice.created',
									'purchase_invoice.updated',
									'voucher.created',
									'voucher.updated',
									'bank.transaction',
								],
							},
						},
						options: [
							{
								displayName: 'Amount Range Options',
								name: 'amountRangeOptions',
								values: [
									{
										displayName: 'Minimum Amount',
										name: 'minAmount',
										type: 'number',
										default: 0,
										description: 'Minimum amount to trigger webhook',
									},
									{
										displayName: 'Maximum Amount',
										name: 'maxAmount',
										type: 'number',
										default: 0,
										description: 'Maximum amount to trigger webhook (0 = no limit)',
									},
								],
							},
						],
					},
					{
						displayName: 'Bank Account Filter',
						name: 'bankAccountFilter',
						type: 'string',
						default: '',
						displayOptions: {
							show: {
								event: ['bank.transaction'],
							},
						},
						description: 'Filter bank transactions for specific account number',
					},
					{
						displayName: 'GSTIN Filter',
						name: 'gstinFilter',
						type: 'string',
						default: '',
						displayOptions: {
							show: {
								event: ['gst.return_filed'],
							},
						},
						description: 'Filter GST returns for specific GSTIN',
					},
				],
			},
		],
	},
	{
		displayName: 'Additional Options',
		name: 'additionalOptions',
		type: 'fixedCollection',
		typeOptions: {
			multipleValues: false,
		},
		default: {},
		displayOptions: {
			show: {
				event: [
					'contact.created',
					'contact.updated',
					'contact.deleted',
					'invoice.created',
					'invoice.updated',
					'invoice.paid',
					'quote.created',
					'quote.updated',
					'quote.converted',
					'receipt.created',
					'receipt.updated',
					'catalog.created',
					'catalog.updated',
					'purchase_invoice.created',
					'purchase_invoice.updated',
					'voucher.created',
					'voucher.updated',
					'employee.created',
					'employee.updated',
					'bank.transaction',
					'gst.return_filed',
				],
			},
		},
		options: [
			{
				displayName: 'Additional Options',
				name: 'additionalOptionsValues',
				values: [
					{
						displayName: 'Include Full Data',
						name: 'includeFullData',
						type: 'boolean',
						default: true,
						description: 'Whether to include complete data in webhook payload',
					},
					{
						displayName: 'Retry on Failure',
						name: 'retryOnFailure',
						type: 'boolean',
						default: true,
						description: 'Whether to retry webhook delivery on failure',
					},
					{
						displayName: 'Max Retries',
						name: 'maxRetries',
						type: 'number',
						default: 3,
						displayOptions: {
							show: {
								retryOnFailure: [true],
							},
						},
						description: 'Maximum number of retry attempts',
					},
					{
						displayName: 'Webhook Secret',
						name: 'webhookSecret',
						type: 'string',
						typeOptions: {
							password: true,
						},
						default: '',
						description: 'Secret key for webhook signature validation',
					},
				],
			},
		],
	},
];
